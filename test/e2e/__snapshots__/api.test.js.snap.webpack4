// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`API Invalidate callback should use the default \`noop\` callback when invalidate is called without any callback: console messages 1`] = `
Array [
  "[webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.",
  "[HMR] Waiting for update signal from WDS...",
  "Hey.",
]
`;

exports[`API Invalidate callback should use the default \`noop\` callback when invalidate is called without any callback: page errors 1`] = `Array []`;

exports[`API Invalidate callback should use the default \`noop\` callback when invalidate is called without any callback: response status 1`] = `200`;

exports[`API Invalidate callback should use the provided \`callback\` function: console messages 1`] = `
Array [
  "[webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.",
  "[HMR] Waiting for update signal from WDS...",
  "Hey.",
]
`;

exports[`API Invalidate callback should use the provided \`callback\` function: page errors 1`] = `Array []`;

exports[`API Invalidate callback should use the provided \`callback\` function: response status 1`] = `200`;

exports[`API Server.checkHostHeader should allow URLs with scheme for checking origin when the "option.client.webSocketURL" is object: console messages 1`] = `
Array [
  "[webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.",
  "[HMR] Waiting for update signal from WDS...",
  "Hey.",
  "WebSocket connection to 'ws://test.host:8158/ws' failed: Error in connection establishment: net::ERR_NAME_NOT_RESOLVED",
  "[webpack-dev-server] JSHandle@object",
  "[webpack-dev-server] Disconnected!",
  "[webpack-dev-server] Trying to reconnect...",
]
`;

exports[`API Server.checkHostHeader should allow URLs with scheme for checking origin when the "option.client.webSocketURL" is object: page errors 1`] = `Array []`;

exports[`API Server.checkHostHeader should allow URLs with scheme for checking origin when the "option.client.webSocketURL" is object: response status 1`] = `200`;

exports[`API Server.checkHostHeader should allow URLs with scheme for checking origin when the "option.client.webSocketURL" is object: web socket URL 1`] = `"ws://test.host:8158/ws"`;

exports[`API Server.getFreePort should retry finding the port for up to defaultPortRetry times (number): console messages 1`] = `
Array [
  "[webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.",
  "[HMR] Waiting for update signal from WDS...",
  "Hey.",
]
`;

exports[`API Server.getFreePort should retry finding the port for up to defaultPortRetry times (number): page errors 1`] = `Array []`;

exports[`API Server.getFreePort should retry finding the port for up to defaultPortRetry times (number): response status 1`] = `200`;

exports[`API Server.getFreePort should retry finding the port for up to defaultPortRetry times (string): console messages 1`] = `
Array [
  "[webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.",
  "[HMR] Waiting for update signal from WDS...",
  "Hey.",
]
`;

exports[`API Server.getFreePort should retry finding the port for up to defaultPortRetry times (string): page errors 1`] = `Array []`;

exports[`API Server.getFreePort should retry finding the port for up to defaultPortRetry times (string): response status 1`] = `200`;

exports[`API Server.getFreePort should retry finding the port when serial ports are busy: console messages 1`] = `
Array [
  "[webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.",
  "[HMR] Waiting for update signal from WDS...",
  "Hey.",
]
`;

exports[`API Server.getFreePort should retry finding the port when serial ports are busy: page errors 1`] = `Array []`;

exports[`API Server.getFreePort should retry finding the port when serial ports are busy: response status 1`] = `200`;

exports[`API Server.getFreePort should return the port when the port is \`null\`: console messages 1`] = `
Array [
  "[webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.",
  "[HMR] Waiting for update signal from WDS...",
  "Hey.",
]
`;

exports[`API Server.getFreePort should return the port when the port is \`null\`: page errors 1`] = `Array []`;

exports[`API Server.getFreePort should return the port when the port is \`null\`: response status 1`] = `200`;

exports[`API Server.getFreePort should return the port when the port is undefined: console messages 1`] = `
Array [
  "[webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.",
  "[HMR] Waiting for update signal from WDS...",
  "Hey.",
]
`;

exports[`API Server.getFreePort should return the port when the port is undefined: page errors 1`] = `Array []`;

exports[`API Server.getFreePort should return the port when the port is undefined: response status 1`] = `200`;

exports[`API Server.getFreePort should throw the error when the port isn't found 1`] = `"busy"`;

exports[`API WEBPACK_SERVE environment variable should be present: console messages 1`] = `
Array [
  "[webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.",
  "[HMR] Waiting for update signal from WDS...",
  "Hey.",
]
`;

exports[`API WEBPACK_SERVE environment variable should be present: page errors 1`] = `Array []`;

exports[`API WEBPACK_SERVE environment variable should be present: response status 1`] = `200`;

exports[`API deprecated API should log warning when the "port" and "host" options from options different from arguments ('listen' method): console messages 1`] = `
Array [
  "[webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.",
  "[HMR] Waiting for update signal from WDS...",
  "Hey.",
]
`;

exports[`API deprecated API should log warning when the "port" and "host" options from options different from arguments ('listen' method): page errors 1`] = `Array []`;

exports[`API deprecated API should work with deprecated API ('listen' and 'close' methods): close deprecation log 1`] = `"'close' is deprecated. Please use the async 'stop' or 'stopCallback' method."`;

exports[`API deprecated API should work with deprecated API ('listen' and 'close' methods): console messages 1`] = `
Array [
  "[webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.",
  "[HMR] Waiting for update signal from WDS...",
  "Hey.",
]
`;

exports[`API deprecated API should work with deprecated API ('listen' and 'close' methods): listen deprecation log 1`] = `"'listen' is deprecated. Please use the async 'start' or 'startCallback' method."`;

exports[`API deprecated API should work with deprecated API ('listen' and 'close' methods): page errors 1`] = `Array []`;

exports[`API deprecated API should work with deprecated API (only compiler in constructor): console messages 1`] = `
Array [
  "[webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.",
  "[HMR] Waiting for update signal from WDS...",
  "Hey.",
]
`;

exports[`API deprecated API should work with deprecated API (only compiler in constructor): deprecation log 1`] = `"Using 'compiler' as the first argument is deprecated. Please use 'options' as the first argument and 'compiler' as the second argument."`;

exports[`API deprecated API should work with deprecated API (only compiler in constructor): page errors 1`] = `Array []`;

exports[`API deprecated API should work with deprecated API (the order of the arguments in the constructor): console messages 1`] = `
Array [
  "[webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.",
  "[HMR] Waiting for update signal from WDS...",
  "Hey.",
]
`;

exports[`API deprecated API should work with deprecated API (the order of the arguments in the constructor): deprecation log 1`] = `"Using 'compiler' as the first argument is deprecated. Please use 'options' as the first argument and 'compiler' as the second argument."`;

exports[`API deprecated API should work with deprecated API (the order of the arguments in the constructor): page errors 1`] = `Array []`;

exports[`API latest async API should work and allow to rerun dev server multiple times: console messages 1`] = `
Array [
  "[webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.",
  "[HMR] Waiting for update signal from WDS...",
  "Hey.",
]
`;

exports[`API latest async API should work and allow to rerun dev server multiple times: console messages 2`] = `
Array [
  "[webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.",
  "[HMR] Waiting for update signal from WDS...",
  "Hey.",
]
`;

exports[`API latest async API should work and allow to rerun dev server multiple times: page errors 1`] = `Array []`;

exports[`API latest async API should work and allow to rerun dev server multiple times: page errors 2`] = `Array []`;

exports[`API latest async API should work when using configured manually: console messages 1`] = `
Array [
  "[HMR] Waiting for update signal from WDS...",
  "[webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading disabled, Progress disabled, Overlay disabled.",
  "Hey.",
]
`;

exports[`API latest async API should work when using configured manually: page errors 1`] = `Array []`;

exports[`API latest async API should work with async API: console messages 1`] = `
Array [
  "[webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.",
  "[HMR] Waiting for update signal from WDS...",
  "Hey.",
]
`;

exports[`API latest async API should work with async API: page errors 1`] = `Array []`;

exports[`API latest async API should work with callback API: console messages 1`] = `
Array [
  "[webpack-dev-server] Server started: Hot Module Replacement enabled, Live Reloading enabled, Progress disabled, Overlay enabled.",
  "[HMR] Waiting for update signal from WDS...",
  "Hey.",
]
`;

exports[`API latest async API should work with callback API: page errors 1`] = `Array []`;
