// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`options validate should throw an error on the "allowedHosts" option with '123' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.allowedHosts should be one of these:
   [non-empty string, ...] (should not have fewer than 1 item) | \\"auto\\" | \\"all\\" | non-empty string
   -> Defines routes which are enabled by default, on by default and allows localhost/value from the 'host' option/value from the 'client.webSocketURL' option. https://webpack.js.org/configuration/dev-server/#devserverallowedhosts
   Details:
    * options.allowedHosts should be an array:
      [non-empty string, ...] (should not have fewer than 1 item)
    * options.allowedHosts should be one of these:
      \\"auto\\" | \\"all\\"
    * options.allowedHosts should be a non-empty string."
`;

exports[`options validate should throw an error on the "allowedHosts" option with 'false' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.allowedHosts should be one of these:
   [non-empty string, ...] (should not have fewer than 1 item) | \\"auto\\" | \\"all\\" | non-empty string
   -> Defines routes which are enabled by default, on by default and allows localhost/value from the 'host' option/value from the 'client.webSocketURL' option. https://webpack.js.org/configuration/dev-server/#devserverallowedhosts
   Details:
    * options.allowedHosts should be an array:
      [non-empty string, ...] (should not have fewer than 1 item)
    * options.allowedHosts should be one of these:
      \\"auto\\" | \\"all\\"
    * options.allowedHosts should be a non-empty string."
`;

exports[`options validate should throw an error on the "allowedHosts" option with 'true' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.allowedHosts should be one of these:
   [non-empty string, ...] (should not have fewer than 1 item) | \\"auto\\" | \\"all\\" | non-empty string
   -> Defines routes which are enabled by default, on by default and allows localhost/value from the 'host' option/value from the 'client.webSocketURL' option. https://webpack.js.org/configuration/dev-server/#devserverallowedhosts
   Details:
    * options.allowedHosts should be an array:
      [non-empty string, ...] (should not have fewer than 1 item)
    * options.allowedHosts should be one of these:
      \\"auto\\" | \\"all\\"
    * options.allowedHosts should be a non-empty string."
`;

exports[`options validate should throw an error on the "bonjour" option with '' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.bonjour should be one of these:
   boolean | object { … }
   -> Broadcasts the server via ZeroConf networking on start. https://webpack.js.org/configuration/dev-server/#devserverbonjour
   Details:
    * options.bonjour should be a boolean.
    * options.bonjour should be an object:
      object { … }
      -> Options for bonjour, description available at https://github.com/watson/bonjour#initializing"
`;

exports[`options validate should throw an error on the "client" option with '{"hotEntry":[""]}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.client.hotEntry should be one of these:
   boolean | function
   -> Tells devServer to inject a Hot Module Replacement entry.
   Details:
    * options.client.hotEntry should be a boolean.
    * options.client.hotEntry should be an instance of function."
`;

exports[`options validate should throw an error on the "client" option with '{"logging":"silent"}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.client.logging should be one of these:
   \\"none\\" | \\"error\\" | \\"warn\\" | \\"info\\" | \\"log\\" | \\"verbose\\""
`;

exports[`options validate should throw an error on the "client" option with '{"logging":"whoops!"}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.client.logging should be one of these:
   \\"none\\" | \\"error\\" | \\"warn\\" | \\"info\\" | \\"log\\" | \\"verbose\\""
`;

exports[`options validate should throw an error on the "client" option with '{"needClientEntry":[""]}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.client.needClientEntry should be one of these:
   boolean | function
   -> Tells devServer to inject a client entry.
   Details:
    * options.client.needClientEntry should be a boolean.
    * options.client.needClientEntry should be an instance of function."
`;

exports[`options validate should throw an error on the "client" option with '{"overlay":""}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.client.overlay should be one of these:
   boolean | object { errors?, warnings?, … }
   Details:
    * options.client.overlay should be a boolean.
      -> Show a full-screen overlay in the browser when there are compiler errors or warnings.
    * options.client.overlay should be an object:
      object { errors?, warnings?, … }"
`;

exports[`options validate should throw an error on the "client" option with '{"overlay":{"errors":""}}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.client.overlay.errors should be a boolean.
   -> Show a full-screen overlay in the browser when there are compiler errors."
`;

exports[`options validate should throw an error on the "client" option with '{"overlay":{"warnings":""}}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.client.overlay.warnings should be a boolean.
   -> Show a full-screen overlay in the browser when there are compiler warnings."
`;

exports[`options validate should throw an error on the "client" option with '{"progress":""}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.client.progress should be a boolean.
   -> Print compilation progress in percentage in the browser."
`;

exports[`options validate should throw an error on the "client" option with '{"transport":true}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.client.transport should be one of these:
   \\"sockjs\\" | \\"ws\\" | non-empty string
   -> Allows to set custom transport to communicate with server.
   Details:
    * options.client.transport should be one of these:
      \\"sockjs\\" | \\"ws\\"
    * options.client.transport should be a non-empty string."
`;

exports[`options validate should throw an error on the "client" option with '{"unknownOption":true}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.client has an unknown property 'unknownOption'. These properties are valid:
   object { transport?, logging?, progress?, overlay?, needClientEntry?, hotEntry?, webSocketURL? }
   -> Specifies client properties. https://webpack.js.org/configuration/dev-server/#devserverclient"
`;

exports[`options validate should throw an error on the "client" option with '{"webSocketURL":{"host":""}}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.client.webSocketURL.host should be an non-empty string.
   -> Tells clients connected to devServer to use the provided host."
`;

exports[`options validate should throw an error on the "client" option with '{"webSocketURL":{"host":true,"path":"","port":8080}}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.client.webSocketURL.host should be a non-empty string.
   -> Tells clients connected to devServer to use the provided host."
`;

exports[`options validate should throw an error on the "client" option with '{"webSocketURL":{"path":true}}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.client.webSocketURL.path should be a string.
   -> Tells clients connected to devServer to use the provided path to connect."
`;

exports[`options validate should throw an error on the "client" option with '{"webSocketURL":{"port":""}}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.client.webSocketURL.port should be an non-empty string."
`;

exports[`options validate should throw an error on the "client" option with '{"webSocketURL":{"port":true}}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.client.webSocketURL should be one of these:
   non-empty string | object { protocol?, host?, port?, path? }
   -> When using dev server and you're proxying dev-server, the client script does not always know where to connect to.
   Details:
    * options.client.webSocketURL.port should be one of these:
      number | non-empty string
      -> Tells clients connected to devServer to use the provided port.
      Details:
       * options.client.webSocketURL.port should be a number.
       * options.client.webSocketURL.port should be a non-empty string."
`;

exports[`options validate should throw an error on the "client" option with 'whoops!' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.client should be an object:
   object { transport?, logging?, progress?, overlay?, needClientEntry?, hotEntry?, webSocketURL? }
   -> Specifies client properties. https://webpack.js.org/configuration/dev-server/#devserverclient"
`;

exports[`options validate should throw an error on the "compress" option with '' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.compress should be a boolean.
   -> Enable gzip compression for everything served. https://webpack.js.org/configuration/dev-server/#devservercompress"
`;

exports[`options validate should throw an error on the "devMiddleware" option with '' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.devMiddleware should be an object:
   object { … }
   -> Provide options to webpack-dev-middleware which handles webpack assets. https://webpack.js.org/configuration/dev-server/#devserverdevmiddleware"
`;

exports[`options validate should throw an error on the "headers" option with '1' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.headers should be one of these:
   object { … } | function
   -> Adds headers to all responses. https://webpack.js.org/configuration/dev-server/#devserverheaders
   Details:
    * options.headers should be an object:
      object { … }
    * options.headers should be an instance of function."
`;

exports[`options validate should throw an error on the "headers" option with 'false' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.headers should be one of these:
   object { … } | function
   -> Adds headers to all responses. https://webpack.js.org/configuration/dev-server/#devserverheaders
   Details:
    * options.headers should be an object:
      object { … }
    * options.headers should be an instance of function."
`;

exports[`options validate should throw an error on the "historyApiFallback" option with '' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.historyApiFallback should be one of these:
   boolean | object { … }
   -> When using the HTML5 History API, the index.html page will likely have to be served in place of any 404 responses. https://webpack.js.org/configuration/dev-server/#devserverhistoryapifallback
   Details:
    * options.historyApiFallback should be a boolean.
    * options.historyApiFallback should be an object:
      object { … }
      -> Options for \`historyApiFallback\`, description available at https://github.com/bripkens/connect-history-api-fallback#options"
`;

exports[`options validate should throw an error on the "host" option with '' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.host should be an non-empty string.
   -> Specify a host to use. If you want your server to be accessible externally. https://webpack.js.org/configuration/dev-server/#devserverhost"
`;

exports[`options validate should throw an error on the "host" option with 'false' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.host should be a non-empty string.
   -> Specify a host to use. If you want your server to be accessible externally. https://webpack.js.org/configuration/dev-server/#devserverhost"
`;

exports[`options validate should throw an error on the "host" option with 'null' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.host should be a non-empty string.
   -> Specify a host to use. If you want your server to be accessible externally. https://webpack.js.org/configuration/dev-server/#devserverhost"
`;

exports[`options validate should throw an error on the "hot" option with '' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.hot should be one of these:
   boolean | \\"only\\"
   -> Enable webpack's Hot Module Replacement feature. https://webpack.js.org/configuration/dev-server/#devserverhot
   Details:
    * options.hot should be a boolean.
    * options.hot should be \\"only\\"."
`;

exports[`options validate should throw an error on the "hot" option with 'foo' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.hot should be one of these:
   boolean | \\"only\\"
   -> Enable webpack's Hot Module Replacement feature. https://webpack.js.org/configuration/dev-server/#devserverhot
   Details:
    * options.hot should be a boolean.
    * options.hot should be \\"only\\"."
`;

exports[`options validate should throw an error on the "http2" option with '' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.http2 should be a boolean.
   -> Serve over HTTP/2 using spdy. https://webpack.js.org/configuration/dev-server/#devserverhttp2"
`;

exports[`options validate should throw an error on the "https" option with '' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.https should be one of these:
   boolean | object { passphrase?, requestCert?, cacert?, key?, pfx?, cert? }
   -> By default, dev-server will be served over HTTP. It can optionally be served over HTTP/2 with HTTPS. https://webpack.js.org/configuration/dev-server/#devserverhttps
   Details:
    * options.https should be a boolean.
    * options.https should be an object:
      object { passphrase?, requestCert?, cacert?, key?, pfx?, cert? }"
`;

exports[`options validate should throw an error on the "https" option with '{"cacert":true}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.https should be one of these:
   boolean | object { passphrase?, requestCert?, cacert?, key?, pfx?, cert? }
   -> By default, dev-server will be served over HTTP. It can optionally be served over HTTP/2 with HTTPS. https://webpack.js.org/configuration/dev-server/#devserverhttps
   Details:
    * options.https.cacert should be one of these:
      string | Buffer
      -> Path to an SSL CA certificate.
      Details:
       * options.https.cacert should be a string.
       * options.https.cacert should be an instance of Buffer."
`;

exports[`options validate should throw an error on the "https" option with '{"cert":true}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.https should be one of these:
   boolean | object { passphrase?, requestCert?, cacert?, key?, pfx?, cert? }
   -> By default, dev-server will be served over HTTP. It can optionally be served over HTTP/2 with HTTPS. https://webpack.js.org/configuration/dev-server/#devserverhttps
   Details:
    * options.https.cert should be one of these:
      string | Buffer
      -> Path to an SSL certificate.
      Details:
       * options.https.cert should be a string.
       * options.https.cert should be an instance of Buffer."
`;

exports[`options validate should throw an error on the "https" option with '{"foo":"bar"}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.https has an unknown property 'foo'. These properties are valid:
   object { passphrase?, requestCert?, cacert?, key?, pfx?, cert? }"
`;

exports[`options validate should throw an error on the "https" option with '{"key":10}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.https should be one of these:
   boolean | object { passphrase?, requestCert?, cacert?, key?, pfx?, cert? }
   -> By default, dev-server will be served over HTTP. It can optionally be served over HTTP/2 with HTTPS. https://webpack.js.org/configuration/dev-server/#devserverhttps
   Details:
    * options.https.key should be one of these:
      string | Buffer
      -> Path to an SSL key.
      Details:
       * options.https.key should be a string.
       * options.https.key should be an instance of Buffer."
`;

exports[`options validate should throw an error on the "https" option with '{"passphrase":false}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.https.passphrase should be a string.
   -> Passphrase for a pfx file."
`;

exports[`options validate should throw an error on the "https" option with '{"pfx":10}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.https should be one of these:
   boolean | object { passphrase?, requestCert?, cacert?, key?, pfx?, cert? }
   -> By default, dev-server will be served over HTTP. It can optionally be served over HTTP/2 with HTTPS. https://webpack.js.org/configuration/dev-server/#devserverhttps
   Details:
    * options.https.pfx should be one of these:
      string | Buffer
      -> Path to an SSL pfx file.
      Details:
       * options.https.pfx should be a string.
       * options.https.pfx should be an instance of Buffer."
`;

exports[`options validate should throw an error on the "https" option with '{"requestCert":"test"}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.https.requestCert should be a boolean.
   -> Request for an SSL certificate."
`;

exports[`options validate should throw an error on the "onAfterSetupMiddleware" option with 'false' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.onAfterSetupMiddleware should be an instance of function.
   -> Provides the ability to execute custom middleware after all other middleware internally within the server. https://webpack.js.org/configuration/dev-server/#devserverafter"
`;

exports[`options validate should throw an error on the "onBeforeSetupMiddleware" option with 'false' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.onBeforeSetupMiddleware should be an instance of function.
   -> Provides the ability to execute custom middleware prior to all other middleware internally within the server. https://webpack.js.org/configuration/dev-server/#devserverbefore"
`;

exports[`options validate should throw an error on the "onListening" option with '' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.onListening should be an instance of function.
   -> Provides an option to execute a custom function when webpack-dev-server starts listening for connections on a port. https://webpack.js.org/configuration/dev-server/#onlistening"
`;

exports[`options validate should throw an error on the "open" option with '' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.open should be an non-empty string."
`;

exports[`options validate should throw an error on the "open" option with '{"app":true}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.open should be one of these:
   [non-empty string | object { target?, app? }, ...] | boolean | non-empty string | object { target?, app? }
   -> Tells dev-server to open the browser after server had been started. Set it to true to open your default browser. https://webpack.js.org/configuration/dev-server/#devserveropen
   Details:
    * options.open.app should be one of these:
      object { name?, arguments? } | non-empty string
      -> Open specified browser.
      Details:
       * options.open.app should be an object:
         object { name?, arguments? }
       * options.open.app should be a non-empty string."
`;

exports[`options validate should throw an error on the "open" option with '{"foo":"bar"}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.open has an unknown property 'foo'. These properties are valid:
   object { target?, app? }"
`;

exports[`options validate should throw an error on the "open" option with '{"target":90}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.open should be one of these:
   [non-empty string | object { target?, app? }, ...] | boolean | non-empty string | object { target?, app? }
   -> Tells dev-server to open the browser after server had been started. Set it to true to open your default browser. https://webpack.js.org/configuration/dev-server/#devserveropen
   Details:
    * options.open.target should be one of these:
      [non-empty string, ...] (should not have fewer than 1 item) | boolean | non-empty string
      -> Open specified route in browser.
      Details:
       * options.open.target should be an array:
         [non-empty string, ...] (should not have fewer than 1 item)
       * options.open.target should be a boolean.
       * options.open.target should be a non-empty string."
`;

exports[`options validate should throw an error on the "port" option with '' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.port should be an non-empty string."
`;

exports[`options validate should throw an error on the "port" option with 'false' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.port should be one of these:
   number | non-empty string | \\"auto\\"
   -> Specify a port number to listen for requests on. https://webpack.js.org/configuration/dev-server/#devserverport
   Details:
    * options.port should be a number.
    * options.port should be a non-empty string.
    * options.port should be \\"auto\\"."
`;

exports[`options validate should throw an error on the "port" option with 'null' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.port should be one of these:
   number | non-empty string | \\"auto\\"
   -> Specify a port number to listen for requests on. https://webpack.js.org/configuration/dev-server/#devserverport
   Details:
    * options.port should be a number.
    * options.port should be a non-empty string.
    * options.port should be \\"auto\\"."
`;

exports[`options validate should throw an error on the "proxy" option with '[]' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.proxy should be an non-empty array."
`;

exports[`options validate should throw an error on the "proxy" option with 'false' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.proxy should be one of these:
   object { … } | [object { … } | function, ...] (should not have fewer than 1 item)
   -> Proxying some URLs can be useful when you have a separate API backend development server and you want to send API requests on the same domain. https://webpack.js.org/configuration/dev-server/#devserverproxy
   Details:
    * options.proxy should be an object:
      object { … }
    * options.proxy should be an array:
      [object { … } | function, ...] (should not have fewer than 1 item)"
`;

exports[`options validate should throw an error on the "proxy" option with 'function () {}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.proxy should be one of these:
   object { … } | [object { … } | function, ...] (should not have fewer than 1 item)
   -> Proxying some URLs can be useful when you have a separate API backend development server and you want to send API requests on the same domain. https://webpack.js.org/configuration/dev-server/#devserverproxy
   Details:
    * options.proxy should be an object:
      object { … }
    * options.proxy should be an array:
      [object { … } | function, ...] (should not have fewer than 1 item)"
`;

exports[`options validate should throw an error on the "static" option with '' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.static should be an non-empty string."
`;

exports[`options validate should throw an error on the "static" option with '{"directory":false}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.static.directory should be a non-empty string.
   -> Directory for static contents."
`;

exports[`options validate should throw an error on the "static" option with '{"publicPath":false}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.static should be one of these:
   [non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }, ...] | boolean | non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }
   -> It is possible to configure advanced options for serving static files from directory. See the Express documentation for the possible options. https://webpack.js.org/configuration/dev-server/#devserverstatic
   Details:
    * options.static.publicPath should be one of these:
      [non-empty string, ...] (should not have fewer than 1 item) | non-empty string
      -> The bundled files will be available in the browser under this path.
      Details:
       * options.static.publicPath should be an array:
         [non-empty string, ...] (should not have fewer than 1 item)
       * options.static.publicPath should be a non-empty string."
`;

exports[`options validate should throw an error on the "static" option with '{"serveIndex":"true"}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.static should be one of these:
   [non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }, ...] | boolean | non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }
   -> It is possible to configure advanced options for serving static files from directory. See the Express documentation for the possible options. https://webpack.js.org/configuration/dev-server/#devserverstatic
   Details:
    * options.static.serveIndex should be one of these:
      boolean | object { … }
      -> Tells dev-server to use serveIndex middleware when enabled.
      Details:
       * options.static.serveIndex should be a boolean.
       * options.static.serveIndex should be an object:
         object { … }"
`;

exports[`options validate should throw an error on the "static" option with '{"watch":10}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.static should be one of these:
   [non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }, ...] | boolean | non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }
   -> It is possible to configure advanced options for serving static files from directory. See the Express documentation for the possible options. https://webpack.js.org/configuration/dev-server/#devserverstatic
   Details:
    * options.static.watch should be one of these:
      boolean | object { … }
      -> Watch for files in static content directory.
      Details:
       * options.static.watch should be a boolean.
       * options.static.watch should be an object:
         object { … }
         -> options for watch, description available at https://github.com/paulmillr/chokidar#api"
`;

exports[`options validate should throw an error on the "static" option with '0' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.static should be one of these:
   [non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }, ...] | boolean | non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }
   -> It is possible to configure advanced options for serving static files from directory. See the Express documentation for the possible options. https://webpack.js.org/configuration/dev-server/#devserverstatic
   Details:
    * options.static should be an array:
      [non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }, ...]
    * options.static should be a boolean.
    * options.static should be a non-empty string.
    * options.static should be an object:
      object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }"
`;

exports[`options validate should throw an error on the "static" option with 'null' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.static should be one of these:
   [non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }, ...] | boolean | non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }
   -> It is possible to configure advanced options for serving static files from directory. See the Express documentation for the possible options. https://webpack.js.org/configuration/dev-server/#devserverstatic
   Details:
    * options.static should be an array:
      [non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }, ...]
    * options.static should be a boolean.
    * options.static should be a non-empty string.
    * options.static should be an object:
      object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }"
`;

exports[`options validate should throw an error on the "watchFiles" option with '123' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.watchFiles should be one of these:
   [non-empty string | object { paths?, options? }, ...] | non-empty string | object { paths?, options? }
   -> List of files to watch for file changes and serve. https://webpack.js.org/configuration/dev-server/#devserverwatchfiles
   Details:
    * options.watchFiles should be an array:
      [non-empty string | object { paths?, options? }, ...]
    * options.watchFiles should be a non-empty string.
    * options.watchFiles should be an object:
      object { paths?, options? }"
`;

exports[`options validate should throw an error on the "watchFiles" option with 'false' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.watchFiles should be one of these:
   [non-empty string | object { paths?, options? }, ...] | non-empty string | object { paths?, options? }
   -> List of files to watch for file changes and serve. https://webpack.js.org/configuration/dev-server/#devserverwatchfiles
   Details:
    * options.watchFiles should be an array:
      [non-empty string | object { paths?, options? }, ...]
    * options.watchFiles should be a non-empty string.
    * options.watchFiles should be an object:
      object { paths?, options? }"
`;

exports[`options validate should throw an error on the "webSocketServer" option with '{"notAnOption":true}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.webSocketServer has an unknown property 'notAnOption'. These properties are valid:
   object { type?, options? }"
`;

exports[`options validate should throw an error on the "webSocketServer" option with '{"type":true}' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.webSocketServer should be one of these:
   \\"sockjs\\" | \\"ws\\" | non-empty string | function | object { type?, options? }
   -> Allows to set web socket server and options.
   Details:
    * options.webSocketServer.type should be one of these:
      \\"sockjs\\" | \\"ws\\" | non-empty string | function
      Details:
       * options.webSocketServer.type should be one of these:
         \\"sockjs\\" | \\"ws\\"
       * options.webSocketServer.type should be a non-empty string.
       * options.webSocketServer.type should be an instance of function."
`;

exports[`options validate should throw an error on the "webSocketServer" option with 'false' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.webSocketServer should be one of these:
   \\"sockjs\\" | \\"ws\\" | non-empty string | function | object { type?, options? }
   -> Allows to set web socket server and options.
   Details:
    * options.webSocketServer should be one of these:
      \\"sockjs\\" | \\"ws\\"
    * options.webSocketServer should be a non-empty string.
    * options.webSocketServer should be an instance of function.
    * options.webSocketServer should be an object:
      object { type?, options? }"
`;

exports[`options validate should throw an error on the "webSocketServer" option with 'nonexistent-implementation' value 1`] = `"Error: When you use custom web socket implementation you must explicitly specify client.transport. client.transport must be a string denoting a default implementation (e.g. 'sockjs', 'ws') or a full path to a JS file which exports a class extending BaseClient (webpack-dev-server/client-src/clients/BaseClient.js) via require.resolve(...)"`;

exports[`options validate should throw an error on the "webSocketServer" option with 'null' value 1`] = `
"ValidationError: Invalid options object. Dev Server has been initialized using an options object that does not match the API schema.
 - options.webSocketServer should be one of these:
   \\"sockjs\\" | \\"ws\\" | non-empty string | function | object { type?, options? }
   -> Allows to set web socket server and options.
   Details:
    * options.webSocketServer should be one of these:
      \\"sockjs\\" | \\"ws\\"
    * options.webSocketServer should be a non-empty string.
    * options.webSocketServer should be an instance of function.
    * options.webSocketServer should be an object:
      object { type?, options? }"
`;
