// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`options validate should throw an error on the "bonjour" option with '' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.bonjour should be one of these:
   boolean | object { … }
   -> Broadcasts the server via ZeroConf networking on start. https://webpack.js.org/configuration/dev-server/#devserverbonjour
   Details:
    * configuration.bonjour should be a boolean.
    * configuration.bonjour should be an object:
      object { … }
      -> Options for bonjour, description available at https://github.com/watson/bonjour#initializing"
`;

exports[`options validate should throw an error on the "client" option with '{"host":true,"path":"","port":8080}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.client.host should be a string.
   -> Tells clients connected to devServer to use the provided host."
`;

exports[`options validate should throw an error on the "client" option with '{"logging":"silent"}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.client.logging should be one of these:
   \\"none\\" | \\"error\\" | \\"warn\\" | \\"info\\" | \\"log\\" | \\"verbose\\""
`;

exports[`options validate should throw an error on the "client" option with '{"logging":"whoops!"}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.client.logging should be one of these:
   \\"none\\" | \\"error\\" | \\"warn\\" | \\"info\\" | \\"log\\" | \\"verbose\\""
`;

exports[`options validate should throw an error on the "client" option with '{"needClientEntry":[""]}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.client.needClientEntry should be one of these:
   boolean | function
   -> Tells devServer to inject a client entry.
   Details:
    * configuration.client.needClientEntry should be a boolean.
    * configuration.client.needClientEntry should be an instance of function."
`;

exports[`options validate should throw an error on the "client" option with '{"needHotEntry":[""]}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.client.needHotEntry should be one of these:
   boolean | function
   -> Tells devServer to inject a Hot Module Replacement entry.
   Details:
    * configuration.client.needHotEntry should be a boolean.
    * configuration.client.needHotEntry should be an instance of function."
`;

exports[`options validate should throw an error on the "client" option with '{"overlay":""}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.client.overlay should be one of these:
   boolean | object { errors?, warnings?, … }
   Details:
    * configuration.client.overlay should be a boolean.
      -> Show a full-screen overlay in the browser when there are compiler errors or warnings.
    * configuration.client.overlay should be an object:
      object { errors?, warnings?, … }"
`;

exports[`options validate should throw an error on the "client" option with '{"overlay":{"errors":""}}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.client.overlay.errors should be a boolean.
   -> Show a full-screen overlay in the browser when there are compiler errors."
`;

exports[`options validate should throw an error on the "client" option with '{"overlay":{"warnings":""}}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.client.overlay.warnings should be a boolean.
   -> Show a full-screen overlay in the browser when there are compiler warnings."
`;

exports[`options validate should throw an error on the "client" option with '{"path":true}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.client.path should be a string.
   -> Tells clients connected to devServer to use the provided path to connect."
`;

exports[`options validate should throw an error on the "client" option with '{"port":true}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.client.port should be one of these:
   number | string | null
   -> Tells clients connected to devServer to use the provided port.
   Details:
    * configuration.client.port should be a number.
    * configuration.client.port should be a string.
    * configuration.client.port should be a null."
`;

exports[`options validate should throw an error on the "client" option with '{"progress":""}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.client.progress should be a boolean.
   -> Print compilation progress in percentage in the browser."
`;

exports[`options validate should throw an error on the "client" option with '{"unknownOption":true}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.client has an unknown property 'unknownOption'. These properties are valid:
   object { host?, path?, port?, logging?, progress?, overlay?, needClientEntry?, needHotEntry? }
   -> Specifies client properties. https://webpack.js.org/configuration/dev-server/#devserverclient"
`;

exports[`options validate should throw an error on the "client" option with 'whoops!' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.client should be an object:
   object { host?, path?, port?, logging?, progress?, overlay?, needClientEntry?, needHotEntry? }
   -> Specifies client properties. https://webpack.js.org/configuration/dev-server/#devserverclient"
`;

exports[`options validate should throw an error on the "compress" option with '' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.compress should be a boolean.
   -> Enable gzip compression for everything served. https://webpack.js.org/configuration/dev-server/#devservercompress"
`;

exports[`options validate should throw an error on the "devMiddleware" option with '' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.devMiddleware should be an object:
   object { … }
   -> Provide options to webpack-dev-middleware which handles webpack assets. https://webpack.js.org/configuration/dev-server/#devserverdevmiddleware"
`;

exports[`options validate should throw an error on the "firewall" option with '' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.firewall should be one of these:
   boolean | [string, ...] (should not have fewer than 1 item)
   -> Defines routes which are enabled by default, on by default and allows localhost. https://webpack.js.org/configuration/dev-server/#devserverfirewall
   Details:
    * configuration.firewall should be a boolean.
    * configuration.firewall should be an array:
      [string, ...] (should not have fewer than 1 item)"
`;

exports[`options validate should throw an error on the "firewall" option with '[]' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.firewall should be an non-empty array."
`;

exports[`options validate should throw an error on the "headers" option with '1' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.headers should be one of these:
   object { … } | function
   -> Adds headers to all responses. https://webpack.js.org/configuration/dev-server/#devserverheaders
   Details:
    * configuration.headers should be an object:
      object { … }
    * configuration.headers should be an instance of function."
`;

exports[`options validate should throw an error on the "headers" option with 'false' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.headers should be one of these:
   object { … } | function
   -> Adds headers to all responses. https://webpack.js.org/configuration/dev-server/#devserverheaders
   Details:
    * configuration.headers should be an object:
      object { … }
    * configuration.headers should be an instance of function."
`;

exports[`options validate should throw an error on the "historyApiFallback" option with '' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.historyApiFallback should be one of these:
   boolean | object { … }
   -> When using the HTML5 History API, the index.html page will likely have to be served in place of any 404 responses. https://webpack.js.org/configuration/dev-server/#devserverhistoryapifallback
   Details:
    * configuration.historyApiFallback should be a boolean.
    * configuration.historyApiFallback should be an object:
      object { … }"
`;

exports[`options validate should throw an error on the "host" option with 'false' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.host should be one of these:
   string | null
   -> Specify a host to use. If you want your server to be accessible externally. https://webpack.js.org/configuration/dev-server/#devserverhost
   Details:
    * configuration.host should be a string.
    * configuration.host should be a null."
`;

exports[`options validate should throw an error on the "hot" option with '' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.hot should be one of these:
   boolean | \\"only\\"
   -> Enable webpack's Hot Module Replacement feature. https://webpack.js.org/configuration/dev-server/#devserverhot
   Details:
    * configuration.hot should be a boolean.
    * configuration.hot should be \\"only\\"."
`;

exports[`options validate should throw an error on the "hot" option with 'foo' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.hot should be one of these:
   boolean | \\"only\\"
   -> Enable webpack's Hot Module Replacement feature. https://webpack.js.org/configuration/dev-server/#devserverhot
   Details:
    * configuration.hot should be a boolean.
    * configuration.hot should be \\"only\\"."
`;

exports[`options validate should throw an error on the "http2" option with '' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.http2 should be a boolean.
   -> Serve over HTTP/2 using spdy. https://webpack.js.org/configuration/dev-server/#devserverhttp2"
`;

exports[`options validate should throw an error on the "https" option with '' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.https should be one of these:
   boolean | object { passphrase?, requestCert?, cacert?, key?, pfx?, cert? }
   -> By default, dev-server will be served over HTTP. It can optionally be served over HTTP/2 with HTTPS. https://webpack.js.org/configuration/dev-server/#devserverhttps
   Details:
    * configuration.https should be a boolean.
    * configuration.https should be an object:
      object { passphrase?, requestCert?, cacert?, key?, pfx?, cert? }"
`;

exports[`options validate should throw an error on the "https" option with '{"cacert":true}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.https should be one of these:
   boolean | object { passphrase?, requestCert?, cacert?, key?, pfx?, cert? }
   -> By default, dev-server will be served over HTTP. It can optionally be served over HTTP/2 with HTTPS. https://webpack.js.org/configuration/dev-server/#devserverhttps
   Details:
    * configuration.https.cacert should be one of these:
      string | Buffer
      -> Path to an SSL CA certificate.
      Details:
       * configuration.https.cacert should be a string.
       * configuration.https.cacert should be an instance of Buffer."
`;

exports[`options validate should throw an error on the "https" option with '{"cert":true}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.https should be one of these:
   boolean | object { passphrase?, requestCert?, cacert?, key?, pfx?, cert? }
   -> By default, dev-server will be served over HTTP. It can optionally be served over HTTP/2 with HTTPS. https://webpack.js.org/configuration/dev-server/#devserverhttps
   Details:
    * configuration.https.cert should be one of these:
      string | Buffer
      -> Path to an SSL certificate.
      Details:
       * configuration.https.cert should be a string.
       * configuration.https.cert should be an instance of Buffer."
`;

exports[`options validate should throw an error on the "https" option with '{"foo":"bar"}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.https has an unknown property 'foo'. These properties are valid:
   object { passphrase?, requestCert?, cacert?, key?, pfx?, cert? }"
`;

exports[`options validate should throw an error on the "https" option with '{"key":10}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.https should be one of these:
   boolean | object { passphrase?, requestCert?, cacert?, key?, pfx?, cert? }
   -> By default, dev-server will be served over HTTP. It can optionally be served over HTTP/2 with HTTPS. https://webpack.js.org/configuration/dev-server/#devserverhttps
   Details:
    * configuration.https.key should be one of these:
      string | Buffer
      -> Path to an SSL key.
      Details:
       * configuration.https.key should be a string.
       * configuration.https.key should be an instance of Buffer."
`;

exports[`options validate should throw an error on the "https" option with '{"passphrase":false}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.https.passphrase should be a string.
   -> Passphrase for a pfx file."
`;

exports[`options validate should throw an error on the "https" option with '{"pfx":10}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.https should be one of these:
   boolean | object { passphrase?, requestCert?, cacert?, key?, pfx?, cert? }
   -> By default, dev-server will be served over HTTP. It can optionally be served over HTTP/2 with HTTPS. https://webpack.js.org/configuration/dev-server/#devserverhttps
   Details:
    * configuration.https.pfx should be one of these:
      string | Buffer
      -> Path to an SSL pfx file.
      Details:
       * configuration.https.pfx should be a string.
       * configuration.https.pfx should be an instance of Buffer."
`;

exports[`options validate should throw an error on the "https" option with '{"requestCert":"test"}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.https.requestCert should be a boolean.
   -> Request for an SSL certificate."
`;

exports[`options validate should throw an error on the "onAfterSetupMiddleware" option with 'false' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.onAfterSetupMiddleware should be an instance of function.
   -> Provides the ability to execute custom middleware after all other middleware internally within the server. https://webpack.js.org/configuration/dev-server/#devserverafter"
`;

exports[`options validate should throw an error on the "onBeforeSetupMiddleware" option with 'false' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.onBeforeSetupMiddleware should be an instance of function.
   -> Provides the ability to execute custom middleware prior to all other middleware internally within the server. https://webpack.js.org/configuration/dev-server/#devserverbefore"
`;

exports[`options validate should throw an error on the "onListening" option with '' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.onListening should be an instance of function.
   -> Provides an option to execute a custom function when webpack-dev-server starts listening for connections on a port. https://webpack.js.org/configuration/dev-server/#onlistening"
`;

exports[`options validate should throw an error on the "open" option with '' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.open should be an non-empty string."
`;

exports[`options validate should throw an error on the "open" option with '[]' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.open should be an non-empty array."
`;

exports[`options validate should throw an error on the "open" option with '{"app":true}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.open should be one of these:
   boolean | non-empty string | object { target?, app? } | [non-empty string | object { target?, app? }, ...] (should not have fewer than 1 item)
   -> Tells dev-server to open the browser after server had been started. Set it to true to open your default browser. https://webpack.js.org/configuration/dev-server/#devserveropen
   Details:
    * configuration.open.app should be one of these:
      non-empty string | [non-empty string, ...] (should not have fewer than 1 item)
      -> Open specified browser.
      Details:
       * configuration.open.app should be a non-empty string.
       * configuration.open.app should be an array:
         [non-empty string, ...] (should not have fewer than 1 item)"
`;

exports[`options validate should throw an error on the "open" option with '{"foo":"bar"}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.open has an unknown property 'foo'. These properties are valid:
   object { target?, app? }"
`;

exports[`options validate should throw an error on the "open" option with '{"target":90}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.open should be one of these:
   boolean | non-empty string | object { target?, app? } | [non-empty string | object { target?, app? }, ...] (should not have fewer than 1 item)
   -> Tells dev-server to open the browser after server had been started. Set it to true to open your default browser. https://webpack.js.org/configuration/dev-server/#devserveropen
   Details:
    * configuration.open.target should be one of these:
      boolean | non-empty string | [non-empty string, ...] (should not have fewer than 1 item)
      -> Open specified route in browser.
      Details:
       * configuration.open.target should be a boolean.
       * configuration.open.target should be a non-empty string.
       * configuration.open.target should be an array:
         [non-empty string, ...] (should not have fewer than 1 item)"
`;

exports[`options validate should throw an error on the "port" option with 'false' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.port should be one of these:
   number | string | null
   -> Specify a port number to listen for requests on. https://webpack.js.org/configuration/dev-server/#devserverport
   Details:
    * configuration.port should be a number.
    * configuration.port should be a string.
    * configuration.port should be a null."
`;

exports[`options validate should throw an error on the "proxy" option with '[]' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.proxy should be an non-empty array."
`;

exports[`options validate should throw an error on the "proxy" option with 'false' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.proxy should be one of these:
   object { … } | [object { … } | function, ...] (should not have fewer than 1 item)
   -> Proxying some URLs can be useful when you have a separate API backend development server and you want to send API requests on the same domain. https://webpack.js.org/configuration/dev-server/#devserverproxy
   Details:
    * configuration.proxy should be an object:
      object { … }
    * configuration.proxy should be an array:
      [object { … } | function, ...] (should not have fewer than 1 item)"
`;

exports[`options validate should throw an error on the "proxy" option with 'function () {}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.proxy should be one of these:
   object { … } | [object { … } | function, ...] (should not have fewer than 1 item)
   -> Proxying some URLs can be useful when you have a separate API backend development server and you want to send API requests on the same domain. https://webpack.js.org/configuration/dev-server/#devserverproxy
   Details:
    * configuration.proxy should be an object:
      object { … }
    * configuration.proxy should be an array:
      [object { … } | function, ...] (should not have fewer than 1 item)"
`;

exports[`options validate should throw an error on the "public" option with 'false' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.public should be a string.
   -> When using dev server and you're proxying dev-server, the client script does not always know where to connect to. It will try to guess the URL of the server based on window.location, but if that fails you'll need to use this. https://webpack.js.org/configuration/dev-server/#devserverpublic"
`;

exports[`options validate should throw an error on the "static" option with '' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.static should be an non-empty string."
`;

exports[`options validate should throw an error on the "static" option with '{"directory":false}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.static.directory should be a non-empty string.
   -> Directory for static contents."
`;

exports[`options validate should throw an error on the "static" option with '{"publicPath":false}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.static should be one of these:
   boolean | non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? } | [non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }, ...] (should not have fewer than 1 item)
   -> It is possible to configure advanced options for serving static files from directory. See the Express documentation for the possible options. https://webpack.js.org/configuration/dev-server/#devserverstatic
   Details:
    * configuration.static.publicPath should be one of these:
      non-empty string | [non-empty string, ...] (should not have fewer than 1 item)
      -> The bundled files will be available in the browser under this path.
      Details:
       * configuration.static.publicPath should be a non-empty string.
       * configuration.static.publicPath should be an array:
         [non-empty string, ...] (should not have fewer than 1 item)"
`;

exports[`options validate should throw an error on the "static" option with '{"serveIndex":"true"}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.static should be one of these:
   boolean | non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? } | [non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }, ...] (should not have fewer than 1 item)
   -> It is possible to configure advanced options for serving static files from directory. See the Express documentation for the possible options. https://webpack.js.org/configuration/dev-server/#devserverstatic
   Details:
    * configuration.static.serveIndex should be one of these:
      boolean | object { … }
      -> Tells dev-server to use serveIndex middleware when enabled.
      Details:
       * configuration.static.serveIndex should be a boolean.
       * configuration.static.serveIndex should be an object:
         object { … }"
`;

exports[`options validate should throw an error on the "static" option with '{"watch":10}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.static should be one of these:
   boolean | non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? } | [non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }, ...] (should not have fewer than 1 item)
   -> It is possible to configure advanced options for serving static files from directory. See the Express documentation for the possible options. https://webpack.js.org/configuration/dev-server/#devserverstatic
   Details:
    * configuration.static.watch should be one of these:
      boolean | object { … }
      -> Watch for files in static content directory.
      Details:
       * configuration.static.watch should be a boolean.
       * configuration.static.watch should be an object:
         object { … }
         -> options for watch, description available at https://github.com/paulmillr/chokidar#api"
`;

exports[`options validate should throw an error on the "static" option with '0' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.static should be one of these:
   boolean | non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? } | [non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }, ...] (should not have fewer than 1 item)
   -> It is possible to configure advanced options for serving static files from directory. See the Express documentation for the possible options. https://webpack.js.org/configuration/dev-server/#devserverstatic
   Details:
    * configuration.static should be a boolean.
    * configuration.static should be a non-empty string.
    * configuration.static should be an object:
      object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }
    * configuration.static should be an array:
      [non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }, ...] (should not have fewer than 1 item)"
`;

exports[`options validate should throw an error on the "static" option with 'null' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.static should be one of these:
   boolean | non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? } | [non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }, ...] (should not have fewer than 1 item)
   -> It is possible to configure advanced options for serving static files from directory. See the Express documentation for the possible options. https://webpack.js.org/configuration/dev-server/#devserverstatic
   Details:
    * configuration.static should be a boolean.
    * configuration.static should be a non-empty string.
    * configuration.static should be an object:
      object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }
    * configuration.static should be an array:
      [non-empty string | object { directory?, staticOptions?, publicPath?, serveIndex?, watch? }, ...] (should not have fewer than 1 item)"
`;

exports[`options validate should throw an error on the "transportMode" option with '{"notAnOption":true}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.transportMode has an unknown property 'notAnOption'. These properties are valid:
   object { client?, server? }"
`;

exports[`options validate should throw an error on the "transportMode" option with '{"server":false}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.transportMode should be one of these:
   object { client?, server? } | \\"sockjs\\" | \\"ws\\"
   -> This option allows us either to choose the current devServer transport mode for client/server individually or to provide custom client/server implementation. https://webpack.js.org/configuration/dev-server/#devservertransportmode
   Details:
    * configuration.transportMode.server should be one of these:
      string | function
      Details:
       * configuration.transportMode.server should be a string.
       * configuration.transportMode.server should be an instance of function."
`;

exports[`options validate should throw an error on the "transportMode" option with '{}' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.transportMode.client should be a string."
`;

exports[`options validate should throw an error on the "transportMode" option with 'nonexistent-implementation' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.transportMode should be one of these:
   object { client?, server? } | \\"sockjs\\" | \\"ws\\"
   -> This option allows us either to choose the current devServer transport mode for client/server individually or to provide custom client/server implementation. https://webpack.js.org/configuration/dev-server/#devservertransportmode
   Details:
    * configuration.transportMode should be an object:
      object { client?, server? }
    * configuration.transportMode should be one of these:
      \\"sockjs\\" | \\"ws\\""
`;

exports[`options validate should throw an error on the "transportMode" option with 'null' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.transportMode should be one of these:
   object { client?, server? } | \\"sockjs\\" | \\"ws\\"
   -> This option allows us either to choose the current devServer transport mode for client/server individually or to provide custom client/server implementation. https://webpack.js.org/configuration/dev-server/#devservertransportmode
   Details:
    * configuration.transportMode should be an object:
      object { client?, server? }
    * configuration.transportMode should be one of these:
      \\"sockjs\\" | \\"ws\\""
`;

exports[`options validate should throw an error on the "watchFiles" option with '123' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.watchFiles should be one of these:
   non-empty string | object { paths?, options? } | [non-empty string | object { paths?, options? }, ...]
   -> List of files to watch for file changes and serve. https://webpack.js.org/configuration/dev-server/#devserverwatchfiles
   Details:
    * configuration.watchFiles should be a non-empty string.
    * configuration.watchFiles should be an object:
      object { paths?, options? }
    * configuration.watchFiles should be an array:
      [non-empty string | object { paths?, options? }, ...]"
`;

exports[`options validate should throw an error on the "watchFiles" option with 'false' value 1`] = `
"ValidationError: Invalid configuration object. Object has been initialized using a configuration object that does not match the API schema.
 - configuration.watchFiles should be one of these:
   non-empty string | object { paths?, options? } | [non-empty string | object { paths?, options? }, ...]
   -> List of files to watch for file changes and serve. https://webpack.js.org/configuration/dev-server/#devserverwatchfiles
   Details:
    * configuration.watchFiles should be a non-empty string.
    * configuration.watchFiles should be an object:
      object { paths?, options? }
    * configuration.watchFiles should be an array:
      [non-empty string | object { paths?, options? }, ...]"
`;
